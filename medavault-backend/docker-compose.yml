version: '3.8'

services:
  # Main backend API service
  api:
    build:
      context: .
      target: production
    container_name: medavault-api
    restart: unless-stopped
    ports:
      - "${PORT:-9084}:${PORT:-9084}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-9084}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-medavault}
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - FILE_UPLOAD_PATH=./storage
      - MAX_FILE_SIZE=104857600  # 100MB
      - WEBDAV_URL=${WEBDAV_URL:-http://webdav:8080/webdav}
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - medavault-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: medavault-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-medavault}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-medavault}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medavault-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: medavault-redis
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medavault-network

  # Adminer for database management (optional)
  adminer:
    image: adminer:latest
    container_name: medavault-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - medavault-network

  # Watchtower for automatic updates (optional)
  watchtower:
    image: containrrr/watchtower
    container_name: medavault-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 3600 --cleanup
    restart: unless-stopped
    networks:
      - medavault-network

# Define volumes
volumes:
  postgres_data:
  redis_data:

# Define networks
networks:
  medavault-network:
    driver: bridge
    name: medavault-network
