services:
  # WebDAV Server (custom nginx with WebDAV modules)
  webdav-server:
    build:
      context: .
      dockerfile: Dockerfile.webdav
    container_name: webdav-server
    env_file: .env
    ports:
      - "${WEBDAV_PORT_HTTP}:80"
      - "${WEBDAV_PORT_HTTPS}:443"
    volumes:
      - ${INCOMING_PATH}:/webdav
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/nginx/htpasswd:/etc/nginx/htpasswd:ro
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - WEBDAV_USER=${WEBDAV_USER:-webdav}
      - WEBDAV_PASSWORD=${WEBDAV_PASSWORD:-medavault123}
    user: "1000:1000"
    networks:
      - medavault-network
    restart: unless-stopped

  # Filestash - Web-based WebDAV Client
  filestash-client:
    image: machines/filestash:latest
    container_name: filestash-client
    env_file: .env
    ports:
      - "${FILESTASH_PORT}:8334"
    volumes:
      - filestash-data:/app/data/state
      - ./config/filestash:/app/data/state/config:ro
    environment:
      - PUID=1000
      - PGID=1000
      - APPLICATION_URL=http://localhost:${FILESTASH_PORT}
    depends_on:
      - webdav-server
    networks:
      - medavault-network
    restart: unless-stopped
    user: "1000:1000"
    entrypoint: sh -c "mkdir -p /app/data/state/logs /app/data/state/plugins /app/data/state/config && chown -R 1000:1000 /app/data/state && /app/filestash"

  # Apache Camel Integration Service
  camel-integration:
    build: ./camel-integration
    container_name: camel-integration
    env_file: .env
    volumes:
      - ${STORAGE_PATH}:/app/storage
      - ${LOG_PATH}:/app/logs
      - ./config:/app/config
    environment:
      - NODE_ENV=${NODE_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
    working_dir: /app
    depends_on:
      - webdav-server
      - medavault-backend
    networks:
      - medavault-network
    restart: unless-stopped

  # MedaVault Backend (PostgreSQL + API)
  medavault-db:
    image: postgres:14
    container_name: medavault-db
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - medavault-data:/var/lib/postgresql/data
      - ./config/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT}:5432"
    networks:
      - medavault-network
    restart: unless-stopped

  # MedaVault API
  medavault-backend:
    image: node:18-alpine
    container_name: medavault-backend
    env_file: .env
    ports:
      - "${BACKEND_PORT}:3003"
    volumes:
      - ./medavault-backend:/app
      - ${PROCESSED_PATH}:/app/processed
    working_dir: /app
    command: sh -c "npm install && npm start"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:${DB_PORT}/${POSTGRES_DB}
      - STORAGE_PATH=/app/processed
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - medavault-db
    networks:
      - medavault-network
    restart: unless-stopped

  # Web UI Dashboard
  web-dashboard:
    image: nginx:alpine
    container_name: web-dashboard
    env_file: .env
    ports:
      - "${WEB_DASHBOARD_PORT}:80"
    volumes:
      - ./web-dashboard:/usr/share/nginx/html:ro
      - ./config/dashboard-nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - medavault-network
    restart: unless-stopped

networks:
  medavault-network:
    driver: bridge

volumes:
  medavault-data:
  filestash-data:
